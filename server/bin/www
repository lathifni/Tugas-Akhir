var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var { Server } = require('socket.io'); // Import socket.io

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

var server = http.createServer(app);

/**
 * Setup WebSocket.
 */
const io = new Server(server, {
  cors: {
    origin: "*", // Atur sesuai kebutuhan, bisa ganti dengan URL frontend
    methods: ["GET", "POST"]
  }
}); // Gunakan server HTTP yang sama

let activeUsers = [];
io.on("connection", (socket) => {
  // add new User
  socket.on("new-user-add", (newUserId) => {
    // if user is not added previously
    if (!activeUsers.some((user) => user.userId === newUserId)) {
      activeUsers.push({ userId: newUserId, socketId: socket.id });
    }
  });

  socket.on("join-room", (chat_room_id) => {
    socket.join(chat_room_id);
    console.log(`User joined room: ${chat_room_id}`);
  });

  socket.on("disconnect", () => {
    activeUsers = activeUsers.filter((user) => user.socketId !== socket.id);
    console.log("User Disconnected");
    // send all active users to all users
  });

  // send message to a specific user
  socket.on("send-message", (message) => {    
    socket.to(message.chat_room_id).emit("receive-message", message);
  });

  socket.on("is-read", (message) => {
    socket.to(message.chat_room_id).emit("is-read-notification", message);
  });

  socket.on("read-all-messages", (chat_room_id) => {
    socket.to(chat_room_id).emit("read-all-messages-notification");
  });
});

// server.listen(port, '0.0.0.0');
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}